package main

import (
	"fmt"
	"time"

	log "github.com/sirupsen/logrus"
	"github.com/xuri/excelize/v2"
)

func createReport(username string, asnTableRange string, countryTableRange string) (string, error) {
	f := excelize.NewFile()
	defer func() {
		if err := f.Close(); err != nil {
			fmt.Println(err)
		}
	}()

	// Get the current date and time
	currentTime := time.Now()

	// Get the current date and time with timezone offset included
	datetimeWithOffset := currentTime.Format("060102_150405-0700")

	// Create the filename with the date, time, and timezone
	filename := fmt.Sprintf("asn_country_report_%s.xlsx", datetimeWithOffset)

	// Print the filename to the console
	fmt.Println(filename)

	_ = f.SetSheetName("Sheet1", "Preface")
	_ = f.SetCellValue("Preface", "A1", "Global Cyber Alliance AIDE Report")
	_ = f.SetCellValue("Preface", "A2", "- Attacks by Country & AS in the last 12 hours.")
	_ = f.SetCellValue("Preface", "A4", "This report was generated on:")
	_ = f.SetCellValue("Preface", "A5", "Date:")
	_ = f.SetCellValue("Preface", "A6", "Time:")
	_ = f.SetCellValue("Preface", "B5", currentTime.Format("01/02/06"))
	_ = f.SetCellValue("Preface", "B6", currentTime.Format("15:04:05"))
	_ = f.SetCellValue("Preface", "C6", currentTime.Format("-0700"))
	_ = f.SetCellValue("Preface", "A8", "Generated by:")
	_ = f.SetCellValue("Preface", "A9", username)

	// Create a new sheet.
	_, _ = f.NewSheet("By ASN")

	// Initialise cell values
	_ = f.SetCellValue("By ASN", "A1", "Attacks by ASN in the last 12 hours.")
	_ = f.SetCellValue("By ASN", "A3", "AS Org Name")
	_ = f.SetCellValue("By ASN", "B3", "Attack Count")

	// set column width
	_ = f.SetColWidth("By ASN", "A", "A", 20)
	_ = f.SetColWidth("By ASN", "B", "B", 15)

	// create table
	// the table's size in Range should be dictated by the "size" attribute of the query used to retrieve the data
	enable := true
	err := f.AddTable("By ASN", &excelize.Table{
		Range:             asnTableRange,
		Name:              "asn_count",
		StyleName:         "TableStyleLight20",
		ShowFirstColumn:   true,
		ShowLastColumn:    true,
		ShowRowStripes:    &enable,
		ShowColumnStripes: false,
	})
	if err != nil {
		log.Fatalf("failed to create ASN table: %v", err)
	}

	// Create a new sheet.
	if _, err = f.NewSheet("By Country of Origin"); err != nil {
		log.Fatalf("failed to create new sheet: %v", err)
	}

	// Initialise cell values
	_ = f.SetCellValue("By Country of Origin", "A1", "Attacks by country of origin in the last 12 hours.")
	_ = f.SetCellValue("By Country of Origin", "A3", "Country Name")
	_ = f.SetCellValue("By Country of Origin", "B3", "Attack Count")

	// set column width
	_ = f.SetColWidth("By Country of Origin", "A", "A", 20)
	_ = f.SetColWidth("By Country of Origin", "B", "B", 15)

	// create table
	// the table's size in Range should be dictated by the "size" attribute of the query used to retrieve the data
	err = f.AddTable("By Country of Origin", &excelize.Table{
		Range:             countryTableRange,
		Name:              "country_count",
		StyleName:         "TableStyleLight20",
		ShowFirstColumn:   true,
		ShowLastColumn:    true,
		ShowRowStripes:    &enable,
		ShowColumnStripes: false,
	})
	if err != nil {
		log.Fatalf("failed to create ASN table: %v", err)
	}

	// Set active sheet of the workbook.
	// f.SetActiveSheet(index)

	// Save spreadsheet by the given path
	if err = f.SaveAs(filename); err != nil {
		fmt.Println(err)
	} else {
		fmt.Println("File created.")
	}
	return filename, nil
}

func populateColumn(data interface{}, column string, rowIndex int, sheetName string, filePath string) error {
	file, err := excelize.OpenFile(filePath)
	if err != nil {
		return err
	}

	switch values := data.(type) {
	case []int:
		for _, value := range values {
			cell := fmt.Sprintf("%s%d", column, rowIndex)
			_ = file.SetCellValue(sheetName, cell, value)
			rowIndex++
		}
	case []string:
		for _, value := range values {
			cell := fmt.Sprintf("%s%d", column, rowIndex)
			_ = file.SetCellValue(sheetName, cell, value)
			rowIndex++
		}
	default:
		return fmt.Errorf("unsupported data type")
	}

	return file.Save()
}
